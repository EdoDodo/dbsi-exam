To run the code, first ensure you have suitable versions of the Java Runtime Environment (JRE) and Java compiler installed by running the commands:
    java -version
    javac -version
And checking that the two version numbers are the same and at least 1.8 (this is the case on the lab machines).

Now, make sure the lib directory, and wherever you will build the code are included in your CLASSPATH environment variable.
This can be achieved by running the command (from the directory containing this file):
    CLASSPATH=$(pwd)/lib:($pwd)/build:$CLASSPATH

Then, make the build directory and compile all classes into it by running:
    mkdir -p build
    javac $(find src -name "*.java") -d build

Finally, run the benchmarker (which will run all three solutions in turn) with 8GB of memory by executing:
    java -Xmx8G org.candidate697229.benchmarking.Benchmarker

As provided, the code will timeout after 15 minutes for each solution, which will likely only give the final solution enough time to complete with every scale factor.
The TIMEOUT_SECONDS constant in Configuration.java can be changed to vary this timeout.

The exampleOutput file contains example output obtained by running the program with longer timeout.
This was obtained on a computer with Ubuntu 16.04, an Intel i7-4980HQ processor and 16GB of memory (of which 8GB was given as a heap limit to the JRE).
The JRE used was that from OpenJDK 1.8, 64-bit version.

Results for specific plots can be filtered out from this output, by running for example:
    cat exampleOutput | grep TIME | grep AggOneRunner | grep All
To get the average times (in milliseconds) for computing all the aggregates using AggOne as the scale factor varies.